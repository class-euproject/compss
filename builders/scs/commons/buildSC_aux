#!/bin/bash

  #############################################################
  # Name: buildSC_aux
  # Description: SCRIPT FOR LOCAL COMPSs BUILD in SuperComputers
  # Parameters: <targetDir>           Base Target Installation folder
  #             <modules>             Modules needed to perform installation
  #             <py2_module>          Modules needed to perform python2 binding installation
  #             <py3_modules>         Modules needed to perform python3 binding installation
  #             <additionalExports>   Additional exports to perform installation
  #             <queues_cfg>	        CFG to set as default
  #             <extrae_with_openmpi> Extrae with openmpi enabled
  #             <openmpi_version>     OpenMPI module version
  #             <extrae_with_impi>    Extrae with impi enabled
  #             <impi_version>        IMPI module version
  #             <autoparallel>        Install the AutoParallel module
  #
  # ATTENTION: DO NOT EXECUTE THIS FILE. IT IS AUTOMATICALLY
  #            EXECUTED FROM buildSC script
  #############################################################

  usage() {
    echo "Incorrect number of parameters"
    echo " Usage: buildSC_aux <FullTargetPath> <modules> <py2_modules> <py3_modules> <additionalExports> <queues_cfg> <extrae_with_openmpi> <openmpi_version> <extrae_with_impi> <impi_version> <autoparallel>"
    echo " "
    exit 1
  }

  ####################
  # MAIN
  ####################

  # Get parameters
  if [ $# -ne 11 ]; then
    usage
  fi

  # SET SCRIPT VARIABLES
  targetDir=$1
  modules=$2
  py2_modules=$3
  py3_modules=$4
  additionalExports=$5
  queues_cfg=$6
  extrae_with_openmpi=$7
  openmpi_version=$8
  extrae_with_impi=$9
  impi_version=${10}
  autoparallel=${11}

  SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
  TMP_DIR=${SCRIPT_DIR}/tmp
  
  echo "- SC script Dir = ${SCRIPT_DIR}"
  echo "- SC tmp Dir    = ${TMP_DIR}"
  echo "- SC target Dir = ${targetDir}"

  # Load needed modules on MN
  echo "- Load modules on SC account"
  module purge
  # shellcheck disable=SC2086
  module load ${modules}
  ev=$?
  if [ $ev -ne 0 ]; then
    echo "ERROR: Cannot load required modules"
    exit $ev
  fi

  # Save original path to remove libxml imports that crashes python binding in mt installation
  originalPath=$PATH

  # Load additional exports
  ${additionalExports}
  echo "NEW PATH=$PATH" 
 
  # CREATE TARGET FOLDER
  echo "- Create target folder"
  rm -rf "${targetDir}"
  mkdir -p "${targetDir}"
  mkdir -p "${targetDir}/Doc"
  mkdir -p "${targetDir}/Dependencies"
  mkdir -p "${targetDir}/Dependencies/extrae"
  mkdir -p "${targetDir}/Runtime"
  mkdir -p "${targetDir}/Runtime/configuration"
  mkdir -p "${targetDir}/Runtime/scripts"
  mkdir -p "${targetDir}/Runtime/adaptors"
  mkdir -p "${targetDir}/Runtime/connectors"
  mkdir -p "${targetDir}/Runtime/cloud-conn"
  mkdir -p "${targetDir}/Runtime/scheduler"
  mkdir -p "${targetDir}/Tools"
  mkdir -p "${targetDir}/Tools/monitor"
  mkdir -p "${targetDir}/Tools/storage"
  mkdir -p "${targetDir}/Bindings"
  mkdir -p "${targetDir}/Bindings/bindings-common"

  # RUNTIME DEPLOYMENT
  echo "- Copy Runtime deployment files"

  # Doc
  echo "--- Copy docs"
  find "${TMP_DIR}"/doc/ -name "*.html" -print0 | xargs rm -rf
  cp -r "${TMP_DIR}"/doc/* "${targetDir}"/Doc
  cp "${TMP_DIR}"/changelog "${targetDir}"
  cp "${TMP_DIR}"/LICENSE "${targetDir}"
  cp "${TMP_DIR}"/NOTICE "${targetDir}"
  cp "${TMP_DIR}"/README.md "${targetDir}"
  cp "${TMP_DIR}"/RELEASE_NOTES "${targetDir}"

  # Dependencies
  echo "--- Copy dependencies"
  cp -r "${TMP_DIR}"/dependencies/JAVA_GAT "${targetDir}"/Dependencies/
  cp -r "${TMP_DIR}"/files/paraver "${targetDir}"/Dependencies/

  echo "---- Install extrae ----"
  cd "${TMP_DIR}"/dependencies/extrae || exit 1
  # Sequential installation
  ./install "${targetDir}"/Dependencies/extrae false
  ev=$?
  if [ $ev -ne 0 ]; then
    echo "ERROR: Failed to install extrae sequential dependency"
    exit $ev
  fi

  # OpenMPI
  if [ "${extrae_with_openmpi}" == "true" ]; then
    module load openmpi"${openmpi_version}"
    ./install "${targetDir}"/Dependencies/extrae-openmpi true
    ev=$?
    if [ $ev -ne 0 ]; then
      echo "ERROR: Failed to install extrae openmpi dependency"
      exit $ev
    fi
    module unload openmpi
  fi

  # IMPI
  if [ "${extrae_with_impi}" == "true" ]; then
    module load intel
    module load impi"${impi_version}"
    ./install "${targetDir}"/Dependencies/extrae-impi true
    ev=$?
    if [ $ev -ne 0 ]; then
      echo "ERROR: Failed to install extrae impi dependency"
      exit $ev
    fi
    module unload impi
  fi
  cd "${SCRIPT_DIR}" || exit 1

  # PLUTO (for autoparallel)
  if [ "${autoparallel}" == "true" ]; then
    echo "---- Install PLUTO ----"
    cd "${TMP_DIR}"/dependencies/pluto || exit 1
    ./install_pluto "${targetDir}"/Dependencies/pluto
    ev=$?
    if [ $ev -ne 0 ]; then
      echo "ERROR: Failed to install PLUTO dependency"
      exit $ev
    fi
    cd "${SCRIPT_DIR}" || exit 1
  fi

  # Restore original path
  export PATH=${originalPath}

  # Config
  echo "--- Copy configuration"
  find "${TMP_DIR}"/compss/runtime/config -name src -print0 | xargs rm -rf
  find "${TMP_DIR}"/compss/runtime/config -name target -print0 | xargs rm -rf
  find "${TMP_DIR}"/compss/runtime/config -name pom.xml -print0 | xargs rm -rf
  cp -r "${TMP_DIR}"/compss/runtime/config/* "${targetDir}"/Runtime/configuration/
  sed -i -e 's#/opt/COMPSs/#'"${targetDir}"'#g'  "${targetDir}"/Runtime/configuration/xml/projects/default_project.xml

  # Scripts
  echo "--- Copy scripts"
  cp -r "${TMP_DIR}"/compss/runtime/scripts/* "${targetDir}"/Runtime/scripts/
  cp "${targetDir}"/Runtime/scripts/queues/supercomputers/"${queues_cfg}" "${targetDir}"/Runtime/scripts/queues/supercomputers/default.cfg

  # Adaptors
  echo "--- Copy adaptors"
  find "${TMP_DIR}/compss/runtime/adaptors" -name pom.xml -delete
  find "${TMP_DIR}/compss/runtime/adaptors" -name "*.iml" -delete
  rm -r "${TMP_DIR}/compss/runtime/adaptors/commons"
  path_source=${TMP_DIR}/compss/runtime/adaptors
  path_target=${targetDir}/Runtime/adaptors
  for adaptor in ${path_source}/*; do
    adaptor_name=$(basename "$adaptor")
    mkdir "${path_target}/${adaptor_name}"
    mkdir "${path_target}/${adaptor_name}"/master
    cp "$adaptor"/master/*.jar "${path_target}"/"${adaptor_name}"/master
    if [ -f "$adaptor"/master/properties ]; then
      cp "$adaptor"/master/properties "${path_target}"/"${adaptor_name}"/master
    fi
    if [ -d "$adaptor"/worker/ ]; then
      mkdir "${path_target}/${adaptor_name}"/worker
      cp "$adaptor"/worker/*.jar "${path_target}"/"${adaptor_name}"/worker
    fi
    if [ -f "$adaptor"/worker/properties ]; then
      cp "$adaptor"/worker/properties "${path_target}"/"${adaptor_name}"/worker
    fi
    if [ -d "$adaptor"/scripts/ ]; then
      mkdir -p "${targetDir}"/Runtime/scripts/system/adaptors/"${adaptor_name}"
      cp -r "$adaptor"/scripts/* "${targetDir}"/Runtime/scripts/system/adaptors/"${adaptor_name}"
    fi
  done

  # Schedulers
  echo "--- Copy schedulers"
  rm -r "${TMP_DIR}"/compss/runtime/scheduler/commons
  schedulers=$(find "${TMP_DIR}"/compss/runtime/scheduler/ -name "*.jar")
  for scheduler in $schedulers; do
    cp "$scheduler" "${targetDir}"/Runtime/scheduler/
  done

  # Storage
  echo "--- Copy storage implementations"
  cd "${TMP_DIR}/utils/storage/redisPSCO" || exit 1
  ./make_bundle.sh
  cp -r COMPSs-Redis-bundle "${targetDir}/Tools/storage/redis"
  cd "${SCRIPT_DIR}" || exit 1

  # Connectors
  echo "--- Copy Runtime Connectors"
  connectors=$(find "${TMP_DIR}"/compss/runtime/resources/ -name "*.jar" | grep -v "cloud-conn")
  for conn in $connectors; do
    cp "$conn" "${targetDir}"/Runtime/connectors/
  done
  echo "--- Copy CONN Connectors"
  connectors=$(find "${TMP_DIR}"/compss/runtime/resources/ -name "*.jar" | grep "cloud-conn")
  for conn in $connectors; do
    cp "$conn" "${targetDir}"/Runtime/cloud-conn/
  done

  # Engine
  echo "--- Copy engine"
  cp "${TMP_DIR}"/compss/runtime/compss-engine.jar "${targetDir}"/Runtime/
 
  # TOOLS DEPLOYMENT
  echo "- Deploying COMPSs Tools"
  cd "${TMP_DIR}" || exit 1
  tar xzf apache-tomcat.tar.gz
  cd "${SCRIPT_DIR}" || exit 1
  mv "${TMP_DIR}"/apache-tomcat-* "${targetDir}"/Tools/monitor/apache-tomcat/
  rm -rf "${targetDir}"/Tools/monitor/apache-tomcat/webapps/*
  rm -f "${targetDir}"/Tools/monitor/apache-tomcat/conf/server.xml
  cp -r "${TMP_DIR}"/compss/tools/monitor/target/*.war "${targetDir}"/Tools/monitor/apache-tomcat/webapps/
  cp "${TMP_DIR}"/compss/tools/monitor/target/classes/compss-monitor.conf "${targetDir}"/Tools/monitor/apache-tomcat/conf/
  cp "${TMP_DIR}"/compss/tools/monitor/target/classes/server.xml "${targetDir}"/Tools/monitor/apache-tomcat/conf/
  cp "${TMP_DIR}"/compss/tools/monitor/target/classes/*log4j* "${targetDir}"/Tools/monitor/

  # BINDINGS DEPLOYMENT
  echo "- Deploying bindings-common files"
  cd "${TMP_DIR}"/compss/programming_model/bindings/bindings-common || exit 1
  ./install_common "${targetDir}"/Bindings/bindings-common
  ev=$?
  if [ $ev -ne 0 ]; then
    echo "ERROR: Failed to install bindings-common"
    exit $ev
  fi
  echo "- Deploying c-binding files"
  cd "${TMP_DIR}"/compss/programming_model/bindings/c || exit 1
  ./install "${targetDir}"/Bindings/c true
  ev=$?
  if [ $ev -ne 0 ]; then
    echo "ERROR: Failed to install C-binding"
    exit $ev
  fi
  mkdir -p "${targetDir}"/Runtime/scripts/system/c/
  cp "${targetDir}"/Bindings/c/bin/* "${targetDir}"/Runtime/scripts/system/c
  cp ./compss_build_app "${targetDir}"/Runtime/scripts/user/
  echo "- Deploying python-binding files"
  cd "${TMP_DIR}"/compss/programming_model/bindings/python || exit 1
  if [ -n "$py2_modules" ]; then
    echo "    - For python 2"
    if [ "$py2_modules" != "ignore" ]; then
      #shellcheck disable=SC2086
      module load ${py2_modules}
    fi
    ./install "${targetDir}"/Bindings/python false false python2
    ev=$?
    if [ $ev -ne 0 ]; then
      echo "ERROR: Failed to install Python-binding for Python 2"
      exit $ev
    fi
    if [ "$py2_modules" != "ignore" ]; then
      #shellcheck disable=SC2086
      module unload ${py2_modules}
    fi
  fi
  if [ -n "$py3_modules" ]; then
    echo "    - For python 3"
    if [ "$py3_modules" != "ignore" ]; then
      #shellcheck disable=SC2086
      module load ${py3_modules}
    fi
    # If installed, unify installations (second boolean to true)
    ./install "${targetDir}"/Bindings/python false true python3
    ev=$?
    if [ $ev -ne 0 ]; then
      echo "ERROR: Failed to install Python-binding for Python 3"
      exit $ev
    fi
  fi
  cd "${SCRIPT_DIR}" || exit 1

  # ADD RUNCOMPSS TO PROFILE
  mkdir -p "${targetDir}"/etc/profile.d/
  echo " - Adding runcompss to profile..."
  echo "export PATH=\$PATH:${targetDir}/Runtime/scripts/user:/opt/COMPSs/Runtime/scripts/utils" > "${targetDir}"/etc/profile.d/compss.sh
  echo " - Runcompss added to user profile"
  echo " "
  echo " - Adding compss-engine.jar to profile..."
  echo "export CLASSPATH=\$CLASSPATH:${targetDir}/Runtime/compss-engine.jar" >> "${targetDir}"/etc/profile.d/compss.sh
  echo " - compss-engine.jar added to user profile"
  echo " "
  echo " - Adding c-binaries to profile..."
  echo "export PATH=\$PATH:${targetDir}/Bindings/c/bin" >> "${targetDir}"/etc/profile.d/compss.sh
  echo " - c-binaries added to user profile"
  echo " "
  #echo " - Adding PyCOMPSs to user profile..."
  #echo "export PYTHONPATH=\$PYTHONPATH:${targetDir}/Bindings/python/" >> "${targetDir}"/etc/profile.d/compss.sh
  #echo " - PyCOMPSs added to user profile"
  #echo " "
 
  # ADD MONITOR SCRIPT TO ETC
  echo "- Add monitor script to init.d"
  mkdir -p "${targetDir}"/etc/init.d/
  cp "${TMP_DIR}"/compss/tools/monitor/scripts/compss-monitor "${targetDir}"/etc/init.d/
  chmod 755 "${targetDir}"/etc/init.d/compss-monitor

  # ERASE TMP FILES
  echo "- Erase tmp files"
  rm -rf "${TMP_DIR}"

  # SET TARGETDIR PERMISSIONS
  echo "- Set COMPSs permissions"
  chmod -R 775 "${targetDir}"
  chmod -R 777 "${targetDir}"/Runtime/configuration/

  # Create public usage log file
  log_usage_file="${targetDir}/usage.log"
  echo -e "USAGE DATE\\t\\t\\tUSER" > "${log_usage_file}"
  echo -e "$(date)\\tINSTALLATION" >> "${log_usage_file}"
  chmod 777 "${log_usage_file}"

  # END
  exit 0
