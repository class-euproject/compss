#!/bin/bash

#---------------------------------------------------------------------------------------
# SCRIPT CONSTANTS DECLARATION
#---------------------------------------------------------------------------------------
APP_CMD="curl"
DEFAULT_METHOD="main"

#---------------------------------------------------------------------------------------
# ERROR CONSTANTS DECLARATION
#---------------------------------------------------------------------------------------
ERROR_APPLICATION="Missing application name parameter"
ERROR_MASTER_NODE="Missing master node parameter"
ERROR_MASTER_PORT="Missing master port parameter"

#---------------------------------------------------------------------------------------
# GENERIC HELPER FUNCTIONS
#---------------------------------------------------------------------------------------

###############################################
# Displays version
###############################################
display_version() {
  local exitValue=$1

  "${SCRIPT_DIR}"/runcompss --version

  exit "$exitValue"
}

###############################################
# Displays usage
###############################################
usage() {
  local exitValue=$1
  SCRIPT_NAME=`basename "$0"`
  cat <<EOT
Usage: ${SCRIPT_NAME} [options] application_name application_arguments

* Options:
  General:
    --help, -h                              Print this help message

    --opts                                  Show available options

    --version, -v                           Print COMPSs version

    --master_node=<string>                  Node where to run the COMPSs Master
                                            Mandatory

    --master_port=<string>                  Node where to run the COMPSs Master
                                            Mandatory                                            
  Launch configuration:
EOT

  show_opts "$exitValue"
}

###############################################
# Displays errors when treating arguments
###############################################
display_invocation() {
  echo "Invocation details:"
  echo "    Host:               ${master_node}"
  echo "    Port:               ${master_port}"
  echo "    Lang:               JAVA"
  echo "    Class name:         ${fullAppPath}"
  echo "    Method name:        ${method_name}"
  if [ ! -z "${cei}" ]; then
    echo "    COMPSs Interface    ${cei}"
  fi
  echo "    Parameters:"
  if [ "${params_as_array}" == "true" ]; then
    local params="["
    if [ $# -gt 0 ]; then
      params="${params}$1"
      shift 1
      for param in "$@"; do
        params="${params}, ${param}"
      done
    fi 
    params="${params}]"
    echo "        * $params"
  else
    for param in "$@"; do
      echo "        * ${param}"
    done
  fi
}

###############################################
# Displays errors when treating arguments
###############################################
display_error() {
  local error_msg=$1

  echo "$error_msg"
  echo " "

  usage 1
}

###############################################
# Show Options
###############################################
show_opts() {
  local exitValue=$1

  # Show usage
  cat <<EOT
    --cei=<string>                          Canonical name of the interface declaring the methods
                                            Default: No interface declared

    --method_name=<string>                  Name of the method to invoke
                                            Default: main and enables array parameter

    --parameters_array, --array             Parameters are encapsulated as an array
                                            Default: disabled
EOT

  exit "$exitValue"
}


#---------------------------------------------------------------------------------------
# MAIN FUNCTIONS
#---------------------------------------------------------------------------------------

###############################################
# Function to get the arguments
###############################################
get_args() {
  # Avoid enqueue if there is no application
  if [ $# -eq 0 ]; then
    usage 1
  fi

  params_as_array="false"
  # Parse COMPSs Options
  while getopts hvgtmd-: flag; do
    # Treat the argument
    case "$flag" in
      h)
        # Display help
        usage 0
        ;;
      v)
        # Display version
        display_version 0
        ;;
      -)
      # Check more complex arguments
      case "$OPTARG" in
        array)
          params_as_array="true"
          ;;
        parameters_array)
          params_as_array="true"
          ;;
        help)
          # Display help
          usage 0
          ;;
        version)
          # Display compss version
          display_version 0
          ;;
        opts)
          # Display options
          show_opts 0
          ;;
        master_node=*)
          master_node=${OPTARG//master_node=/}
          ;;
        master_port=*)
          master_port=${OPTARG//master_port=/}
          ;;
        cei=*)
          cei=${OPTARG//cei=/}
          ;;
        method_name=*)
          method_name=${OPTARG//method_name=/}
          ;;
        *)
          # Flag didn't match any patern. Add to COMPSs
          args_pass="$args_pass --$OPTARG"
          ;;
      esac
      ;;
    *)
      # Flag didn't match any patern. End of COMPSs flags
      args_pass="$args_pass -$flag"
      ;;
    esac
  done

  # Shift COMPSs arguments
  shift $((OPTIND-1))

  # Wrap full app path for lang inference
  fullAppPath=$1

  app_args_optind="${OPTIND}"
}

###############################################
# Function to check the arguments
###############################################
check_args() {
  if [ -z "${fullAppPath}" ]; then
    display_error "${ERROR_APPLICATION}"
  fi

  if [ -z "${master_node}" ]; then
    display_error "${ERROR_MASTER_NODE}"
  fi

  if [ -z "${master_port}" ]; then
    display_error "${ERROR_MASTER_PORT}"
  fi

  if [ -z "${method_name}" ]; then
    method_name=${DEFAULT_METHOD}
    params_as_array="true"
  fi
}



###############################################
# Function to get the arguments
###############################################
get_parameters(){
  http_data="${http_data}<parameters>"
  param_id=0
  for param in "$@"; do
    http_data="${http_data}<params paramId=\"${param_id}\">"
    http_data="${http_data}<direction>IN</direction>"
    http_data="${http_data}<paramName></paramName>"
    http_data="${http_data}<prefix></prefix>"
    http_data="${http_data}<stdIOStream>UNSPECIFIED</stdIOStream>"
    http_data="${http_data}<type>STRING_T</type>"
    http_data="${http_data}<element paramId=\"${param_id}\">"
    http_data="${http_data}<className>java.lang.String</className>"
    http_data="${http_data}<value xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xsi:type=\"xs:string\">"
    http_data="${http_data}${param}"
    http_data="${http_data}</value>"
    http_data="${http_data}</element>"
    http_data="${http_data}</params>"
    param_id=$((param_id + 1))
  done
  http_data="${http_data}</parameters>"
}

get_parameters_as_array(){
  http_data="${http_data}<parameters>"
  http_data="${http_data}<params paramId=\"0\">"
  http_data="${http_data}<direction>IN</direction>"
  http_data="${http_data}<paramName>args</paramName>"
  http_data="${http_data}<prefix></prefix>"
  http_data="${http_data}<stdIOStream>UNSPECIFIED</stdIOStream>"
  http_data="${http_data}<type>OBJECT_T</type>"
  http_data="${http_data}<array paramId=\"0\">"
  http_data="${http_data}<componentClassname>java.lang.String</componentClassname>"
  http_data="${http_data}<values>"

  param_id=0
  for param in "$@"; do
    http_data="${http_data}<element paramId=\"${param_id}\">"
    http_data="${http_data}<className>java.lang.String</className>"
    http_data="${http_data}<value xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xsi:type=\"xs:string\">"
    http_data="${http_data}${param}"
    http_data="${http_data}</value>"
    http_data="${http_data}</element>"
    param_id=$((param_id + 1))
  done

  http_data="${http_data}</values>"
  http_data="${http_data}</array>"
  http_data="${http_data}</params>"
  http_data="${http_data}</parameters>"
}

###############################################
# Invoke remote method
###############################################
call(){
  display_invocation "$@"

  http_resource="http://${master_node}:${master_port}/COMPSs/startApplication"
  http_header="content-type: application/xml"
  http_data="<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>"
  http_data="${http_data}<startApplication>"
  if [ ! -z "${cei}" ]; then
    http_data="${http_data}<ceiClass>${cei}</ceiClass>"
  fi
  http_data="${http_data}<className>${fullAppPath}</className>"
  http_data="${http_data}<hasResult>false</hasResult>"
  http_data="${http_data}<methodName>${method_name}</methodName>"
  if [ "${params_as_array}" == "true" ]; then
    get_parameters_as_array "$@"
  else
    get_parameters "$@"
  fi
  #http_data="${http_data}<resources/>"
  http_data="${http_data}</startApplication>"

  "${APP_CMD}" "-s" "-XPUT" "${http_resource}" "-H" "${http_header}" "-d" "${http_data}" 
}

#---------------------------------------------------------------------------------------
# MAIN EXECUTION
#---------------------------------------------------------------------------------------

# Set script variables
if [ -z "$COMPSS_HOME" ]; then
    SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    COMPSS_HOME=${SCRIPT_DIR}/../../../
else
    SCRIPT_DIR="${COMPSS_HOME}/Runtime/scripts/user"
fi

# Get command args
get_args "$@"
shift ${app_args_optind}

# Check other command args
check_args

call "$@"
echo ""
