#!/bin/bash -e

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3
  comm=$4

  # Log files
  runtime_log="${target_log_folder}/runtime.log"
  resources_log="${target_log_folder}/resources.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f "${output_file}" ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 "${output_file}")
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a "${output_file}"
        exit 1
     fi
  else
     echo "[ERROR] Output file not found" | tee -a "${output_file}"
     exit 1
  fi
  # Check that ErrorManager has not raised any ERROR or FATAL message
  if [ -f "${error_file}" ]; then
    if grep -E "\\[ERRMGR\\].*(ERROR|FATAL|Shutting down COMPSs)" "${error_file}"; then
      echo "ERROR: ErrorManager has raised a fatal error" | tee -a "${output_file}"
      exit 1
    fi
  else
    # Empty error file, no exceptions could have been raised
    :
  fi
  # Check that the Runtime has not registered any fatal error
  if [ -f "${runtime_log}" ]; then
    if grep -E "ErrorManager\\].*\\[ERRMGR\\].*Error detected. Shutting down COMPSs" "${runtime_log}"; then
      echo "ERROR: ErrorManager has registered a fatal error in the runtime.log" | tee -a "${output_file}"
      exit 1
    fi
  else
    echo "[ERROR] runtime.log not found" | tee -a "${output_file}"
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # Grep for unit test errors (ERROR or FAIL)
  errors=$(cat "${output_file}" "${error_file}" | grep "ERROR" | cat)
  fails=$(cat "${output_file}" "${error_file}" | grep "FAIL" | cat)
  if [ "${errors}" != "" ] || [ "${fails}" != "" ]; then
      echo "ERROR: UNIT TEST RAISED AN ERROR." | tee -a "${output_file}"
      exit 1
  fi

  #----------------------------------------------------------------------------------
  number_of_tasks=32
  number_of_workers=1

  # Should be equal to Tracer.java definitions
  SYNC_EVENTS=8000666
  TASK_EVENTS=60000100

  #WORKER_TASK=1
  WORKER_RUNNING=102
  #TASK_EXECUTION=120
  #SERIALIZATION=121

  #----------------------------------------------------------------------------------
  # Check that task-bindings events are present and the # is correct

  # GAT does not support task tracing
  if [ "${comm}" != "es.bsc.compss.gat.master.GATAdaptor" ]; then
      evts_tasks=$(grep -c ":${TASK_EVENTS}:[1-9][0-9]*" "${target_log_folder}"/trace/task_tracing_kmeans.py_compss_trace_*.prv)
      evts_tasks_end=$(grep -c "${TASK_EVENTS}:0" "${target_log_folder}"/trace/task_tracing_kmeans.py_compss_trace_*.prv)
      evts_tasks_1=$(grep -c "${TASK_EVENTS}:2\$" "${target_log_folder}"/trace/task_tracing_kmeans.py_compss_trace_*.prv | cat)
      evts_tasks_2=$(grep -c "${TASK_EVENTS}:2:" "${target_log_folder}"/trace/task_tracing_kmeans.py_compss_trace_*.prv | cat)
      evts_tasks_running=$((evts_tasks_1 + evts_tasks_2))
      evts_worker_running=$(grep -c ":${TASK_EVENTS}:${WORKER_RUNNING}" "${target_log_folder}"/trace/task_tracing_kmeans.py_compss_trace_*.prv)
      #evts_worker_running_end=$(grep -c "2:1:1:2:1:.*:${TASK_EVENTS}:0" "${target_log_folder}"/trace/task_tracing_kmeans.py_compss_trace_*.prv)

      sync_evts_init=$(grep -c ":${SYNC_EVENTS}:[1-9][0-9]*" "${target_log_folder}"/trace/task_tracing_kmeans.py_compss_trace_*.prv)
      sync_evts_end=$(grep -c ":${SYNC_EVENTS}:0" "${target_log_folder}"/trace/task_tracing_kmeans.py_compss_trace_*.prv)

      if [ "${evts_tasks_end}" != "${evts_tasks}" ]; then
         echo "[ERROR] Start and end events counts do not match. [${evts_tasks}/${evts_tasks_end}]" | tee -a "${output_file}"
         exit 1
      fi

      if [ "${evts_tasks_running}" != "${number_of_tasks}" ]; then
         echo "[ERROR] Running task events count does not match total tasks. [${evts_tasks_running}/${number_of_tasks}]" | tee -a "${output_file}"
         exit 1
      fi

      if [ "${evts_worker_running}" != "1" ] ; then
        echo "[ERROR] Number of worker start events different than actual number of workers [${evts_worker_running} != 1]" | tee -a "${output_file}"
        exit 1
      fi

      if [ "${sync_evts_init}" != "$((2 * number_of_workers))" ] || [ "${sync_evts_end}" != "$((2 * number_of_workers))" ]; then
        echo "[ERROR] Number of start and end synchronization events are not 4 times the number of workers.
        Expected events: $((4 * number_of_workers)) != Found Events: [${sync_evts_init} + ${sync_evts_end}]" | tee -a "${output_file}"
        exit 1
      fi
  fi

  # Exit value
  exit 0
