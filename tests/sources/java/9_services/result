#!/bin/bash -e

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3

  # Log files
  runtime_log="${target_log_folder}/runtime.log"
  resources_log="${target_log_folder}/resources.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f "${output_file}" ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 "${output_file}")
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a "${output_file}"
        exit 1
     fi
  else
     echo "[ERROR] Output file not found" | tee -a "${output_file}"
     exit 1
  fi
  # Check that ErrorManager has not raised any ERROR or FATAL message
  if [ -f "${error_file}" ]; then
    if grep -E "\\[ERRMGR\\].*(ERROR|FATAL|Shutting down COMPSs)" "${error_file}"; then
      echo "ERROR: ErrorManager has raised a fatal error" | tee -a "${output_file}"
      exit 1
    fi
  else
    # Empty error file, no exceptions could have been raised
    :
  fi
  # Check that the Runtime has not registered any fatal error
  if [ -f "${runtime_log}" ]; then
    if grep -E "ErrorManager\\].*\\[ERRMGR\\].*Error detected. Shutting down COMPSs" "${runtime_log}"; then
      echo "ERROR: ErrorManager has registered a fatal error in the runtime.log" | tee -a "${output_file}"
      exit 1
    fi
  else
    echo "[ERROR] runtime.log not found" | tee -a "${output_file}"
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # Compute result status
  productivity_create=0
  num_create=0
  productivity_print=0
  num_print=0
  
  jobs_path="${target_log_folder}/jobs/"
  for file in ${jobs_path}/*; do
    if [ "${file: -3}" = "out" ]; then
       method_name=$(grep "Method definition" "$file" | tr "[" "\\n" | tr "," "\\n" | tr "=" "\\n" | tr "]" "\\n" | tail -n 2 | head -n 1)
       if [ "${method_name}" == "" ]; then
         # GAT execution
         method_name=$(grep "Method Description 1" "$file" | tr ":" "\\n" | tr " " "\\n" | tail -n 1)
       fi
       
       if [ "$method_name" = "createPerson" ]; then
          #Greps all the wh / prod computed by createPerson method
          wh=$(grep "Working Hours:" "$file" | cut -c 27-)
          prod=$(grep "Production:" "$file"| cut -c 27-)
          productivity=$(bc <<< "scale=5; $prod/$wh")

          #Adds productivity to global count
          productivity_create=$(bc <<< "scale=5; $productivity_create+$productivity")
          num_create=$((num_create + 1))
       else
          if [ "$method_name" = "print" ]; then
             #Greps all the wh / prod computed by print method
             wh=$(grep "Working Hours:" "$file" | cut -c 27-)
             prod=$(grep "Production:" "$file" | cut -c 27-)
             productivity=$(bc <<< "scale=5; $prod/$wh")

             #Adds productivity to global count
             productivity_print=$(bc <<< "scale=5; $productivity_print+$productivity")
             num_print=$((num_print + 1))

             type_print=$(grep "Name" "$file" | cut -c 27-)
             #If it's the stateless print (owner) adds it to create values too
             if [ "$type_print" = "Me" ]; then
                productivity_create=$(bc <<< "scale=5; $productivity_create+$productivity")
                num_create=$((num_create + 1))
             fi
          fi
       fi
    fi
  done
  productivity_print=$(bc <<< "scale=3; ${productivity_print}/${num_print}")
  productivity_create=$(bc <<< "scale=3; ${productivity_create}/${num_create}")
  
  # COMPUTE GOT VALUES
  productivity_ss=$(bc <<< "scale=3; $(grep "\\[LOG\\] \\-\\- Productivity obtained ss:" "${output_file}" | cut -c 36-)")
  productivity_ms=$(bc <<< "scale=3; $(grep "\\[LOG\\] \\-\\- Productivity obtained ms:" "${output_file}" | cut -c 36-)")
  
  #----------------------------------------------------------------------------------
  # CHECK RESULT
  exit_value=0
  if [ "${productivity_ss:0:1}" != "${productivity_print:0:1}" ]; then
     echo "[ERROR] Stateful services are not well treated" | tee -a "${output_file}"
     echo "[GOT] $productivity_ss" | tee -a "${output_file}"
     echo "[EXPECTED] $productivity_print" | tee -a "${output_file}"
     exit_value=2
  fi
  
  if [ "${productivity_ms:0:1}" != "${productivity_create:0:1}" ]; then
     echo "[ERROR] Dependance between statefull services and methods is not well treated" | tee -a "${output_file}"
     echo "[GOT] $productivity_ms" | tee -a "${output_file}"
     echo "[EXPECTED] $productivity_create" | tee -a "${output_file}"
     exit_value=3
  fi  
  
  # Report result status
  exit $exit_value
