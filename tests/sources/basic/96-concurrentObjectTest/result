#!/bin/bash

  # Obtain parameters
  output_file=$1 
  target_log_folder=$2
  
  # Log files
  runtime_log="${target_log_folder}/runtime.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f "${output_file}" ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 "${output_file}")
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a "${output_file}"
        exit 1
     fi
  else
     echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a "${output_file}"
     exit 1
  fi
  # Check that ErrorManager has not generated any ERROR or FATAL message.
  if cat "${output_file}" "${runtime_log}" | tr '\n' ' ' | grep -E -q "[ERRMGR].*(ERROR|FATAL):.*.*Shutting"; then
    echo "ERROR: ERRMGR RAISED A FATAL ERROR. TEST FAILED." | tee -a "${output_file}"
    exit 1
  fi

  #----------------------------------------------------------------------------------

  FILES=17
  resultN=6

#creates an empty file to write 
 if [ -f result.txt ]; then
         rm result.txt
 fi

#checks if the file has been writen as many times as expected
 result=$(cat /tmp/sharedDisk/file.txt)
 if [ ${#result} -ne $resultN ]; then
         echo "ERROR: The number of writing tasks is not correct. ${#result} "
         exit 1
 fi

#checks if all the tasks have been executed through the creation of a job for each
 version=$(ls ~/.COMPSs/ | grep "testConcurrent.TestConcurrent_" | tail -1)

 if [ ! -f ~/.COMPSs/$version/jobs/job"$FILES"_NEW.out ]; then
	echo "ERROR: All tasks have not completed succesfully."
 	exit 1
 fi

 if [ -f ~/.COMPSS/concurrent.ConcurrentM_01/jobs/job"$FILES+1"_NEW.out ]; then
	 echo "ERROR: More tasks than expected have been executed."
	 exit 1
 fi

  # check concurrent execution output. It checks the time betweek concurrent and no concurrent executions

 output1=$(cat $output_file | grep "Opening /" | tr "[" " " | tr "(" " " | tr ")" " " | awk '{ print $1 }' | head -n +1)
 output2=$(cat $output_file | grep "File target Location: " | tr "[" " " | tr "(" " " | tr ")" " " | awk '{ print $1 }' | head -n +1)

  if [ $output2 -lt $(($output1+10000)) ]; then
         echo "ERROR: It does not wait for all tasks to be finished"
         #exit 1
  fi

 output1=$(cat $output_file | grep "Getting object with hash code" | tr "[" " " | tr "(" " " | tr ")" " " | awk '{ print $1 }' | head -n +1)
 output2=$(cat $output_file | grep "Object obtained " | tr "[" " " | tr "(" " " | tr ")" " " | awk '{ print $1 }' | head -n +1)

  if [ $(($output1+6000)) -gt $(($output2)) ]; then
         echo "ERROR: Concurrent type not working"
         #exit 1
  fi

 # check inout execution
 output3=$(cat $output_file | grep "Getting object with hash code" | tr "[" " " | tr "(" " " | tr ")" " " | awk '{ print $1 }' | head -n +2 | tail -n 1)
 output4=$(cat $output_file | grep "Object obtained " | tr "[" " " | tr "(" " " | tr ")" " " | awk '{ print $1 }' | head -n +3 | tail -n 1)

 if [ $(($output4-6000)) -lt $(($output3)) ]; then
        echo "ERROR: It does not wait for all tasks to be finished"
       # exit 1
 fi

 #rm /tmp/sharedDisk/file.txt
  #---------------------------------------------------------------------------------- 
  # ALL OK. Report result status
  exit 0
  
