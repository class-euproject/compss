#!/bin/bash

  # Obtain parameters
  subtest=$1
  output_file=$2
  target_log_folder=$3
  comm=$4
  python_interpreter=$5
  number_of_tasks=32
  number_of_workers=1
  number_of_threads=4
  errors=false
  timer=false

  # Log files
  runtime_log="${target_log_folder}/runtime.log"

  # User events - should be equal to task_tracing_userEvents_*.py
  # The amount of events depends
  USER_EVENTS=70000100
  CLUSTER_MAIN_LOOP=400
  PARTIAL_SUM=401
  REDUCE_KEY=402
  REDUCE_NO_KEY=403
  GENERATE=404
  # Expected events
  expected_user_event_cluster="12"
  expected_user_event_partial_sum="12"
  expected_user_event_reduce_key="12"
  expected_user_event_reduce_no_key="0"
  expected_user_event_generate="2"
  expected_user_event_zeros="38"

  if [ $subtest == "task_tracing_userEvents_tracingHookEnabled" ] || [ $subtest == "task_tracing_userEvents_tracingHookDisabled" ]; then
    #----------------------------------------------------------------------------------
    # Check that user events are present and the # is correct

    # GAT does not support task tracing
    if [ "${comm}" != "es.bsc.compss.gat.master.GATAdaptor" ]; then

        user_event_cluster=$(grep -c ":${USER_EVENTS}:${CLUSTER_MAIN_LOOP}" ${target_log_folder}/trace/${subtest}.py_compss_trace_*.prv)
        user_event_partial_sum=$(grep -c ":${USER_EVENTS}:${PARTIAL_SUM}" ${target_log_folder}/trace/${subtest}.py_compss_trace_*.prv)
        user_event_reduce_key=$(grep -c ":${USER_EVENTS}:${REDUCE_KEY}" ${target_log_folder}/trace/${subtest}.py_compss_trace_*.prv)
        user_event_reduce_no_key=$(grep -c ":${USER_EVENTS}:${REDUCE_NO_KEY}" ${target_log_folder}/trace/${subtest}.py_compss_trace_*.prv)
        user_event_generate=$(grep -c ":${USER_EVENTS}:${GENERATE}" ${target_log_folder}/trace/${subtest}.py_compss_trace_*.prv)
        user_event_zeros=$(grep -c ":${USER_EVENTS}:0" ${target_log_folder}/trace/${subtest}.py_compss_trace_*.prv)

        if [ "${user_event_cluster}" != "${expected_user_event_cluster}" ] ||
           [ "${user_event_partial_sum}" != "${expected_user_event_partial_sum}" ] ||
           [ "${user_event_reduce_key}" != "${expected_user_event_reduce_key}" ] ||
           [ "${user_event_reduce_no_key}" != "${expected_user_event_reduce_no_key}" ] ||
           [ "${user_event_generate}" != "${expected_user_event_generate}" ]; then
          echo "[ERROR] Missing user events."
          echo "Cluster task events: Expected: ${expected_user_event_cluster} Got: ${user_event_cluster}"
          echo "Partial sum task events: Expected: ${expected_user_event_partial_sum} Got: ${user_event_partial_sum}"
          echo "Reduce key task events: Expected: ${expected_user_event_reduce_key} Got: ${user_event_reduce_key}"
          echo "Reduce no key task events: Expected: ${expected_user_event_reduce_no_key} Got: ${user_event_reduce_no_key}"
          echo "Generate task events: Expected: ${expected_user_event_generate} Got: ${user_event_generate}"
          echo "Zero events: Expected: ${expected_user_event_zeros} Got: ${user_event_zeros}"
          errors=true
        fi

        emitted_tasks=$(($user_event_cluster + $user_event_partial_sum + $user_event_reduce_key + $user_event_reduce_no_key + $user_event_generate))
        if [ "${emitted_tasks}" != "${user_event_zeros}" ]; then
          echo "[ERROR] The emitted tasks does not match the number of zero events."
          echo "Emited task events: Expected: ${emitted_tasks}"
          echo "Zero events: ${user_event_zeros}"
          errors=true
        fi

    fi
  elif [ $subtest == "task_tracing_delayer_tracingHookEnabled" ] ||
       [ $subtest == "task_tracing_delayer_tracingHookDisabled" ]; then
    # Retrieve the time that the application needed from the trace
    elapsed_time=$(head -n 1 ${target_log_folder}/trace/${subtest}.py_compss_trace_*.prv | cut -d":" -f 3 |  cut -d"_" -f 1)
    timer=true
  else
    echo "ERROR: UNRECOGNIZED SUBTEST."
    exit 1
  fi

  # Check that ErrorManager has not generated any ERROR or FATAL message.
  if $(cat "${output_file}" "${runtime_log}" | tr '\n' ' ' | grep -c -E -q "[ERRMGR].*(ERROR|FATAL):.*.*Shutting"); then
    echo "ERROR: ERRMGR RAISED A FATAL ERROR. TEST FAILED." | tee -a ${output_file}
    errors=true
  fi

  # Return the time needed and exit
  if [ $timer == true ] ; then
    echo $elapsed_time
    exit 0
  fi

  # Exit value
  if [ $errors == true ] ; then
    exit 1
  fi

  exit 0
