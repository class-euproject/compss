#!/bin/bash

  #Obtain parameters
  output_file=$1 
  target_log_folder=$2
  
  # Log files
  runtime_log="${target_log_folder}/runtime.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f ${output_file} ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 ${output_file})
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a ${output_file}
        exit 1
     fi
  else
     echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a ${output_file}
     exit 1
  fi
  # Check that ErrorManager has not generated any ERROR or FATAL message.
  if $(cat "${output_file}" "${runtime_log}" | tr '\n' ' ' | grep -E -q "[ERRMGR].*(ERROR|FATAL):.*.*Shutting"); then
    echo "ERROR: ERRMGR RAISED A FATAL ERROR. TEST FAILED." | tee -a ${output_file}
    exit 1
  fi

  #---------------------------------------------------------------------------------- 
 
 FILES=15
 
 if [ -f result.txt ]; then
         rm result.txt
 fi

 result=$(cat /tmp/sharedDisk/file.txt)
 if [ ${#result} -ne 15 ]; then
         echo "ERROR: Final result is not correct. ${#result} "
         exit 1
 fi

 version=$(ls ~/.COMPSs/ | grep "concurrent.ConcurrentM_" | tail -1)

 if [ ! -f ~/.COMPSs/$version/jobs/job"$FILES"_NEW.err ]; then
	echo "ERROR: All tasks have not completed succesfully."
 	exit 1
 fi

 if [ -f ~/.COMPSS/concurrent.ConcurrentM_01/jobs/job"$FILES+1"_NEW.err ]; then
	 echo "ERROR: More tasks than expected have been executed."
	 exit 1
 fi
 
 exec &> result.txt
 output1=cat result.txt | grep "Barrier for app" | tr "[" " " | tr "(" " " | tr ")" " " | awk '{ print $1 }'
 output2=cat result.txt | grep "No more tasks" | tr "[" " " | tr "(" " " | tr ")" " " | awk '{ print $1 }'

 if [ $output2 -ne $output1 + 2000 ]; then
	 echo "ERROR: It does not wait for all tasks to be finished"
	 exit 1
 fi

 rm result.txt

  # All ok
  exit 0
  
