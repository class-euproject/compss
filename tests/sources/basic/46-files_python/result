#!/bin/bash

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3
  base_app_dir=$4

  # Log files
  runtime_log="${target_log_folder}/runtime.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f ${output_file} ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 ${output_file})
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a ${output_file}
        exit 1
     fi
  else
     echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a ${output_file}
     exit 1
  fi
  # Check that ErrorManager has not generated any ERROR or FATAL message.
  if $(cat "${output_file}" "${runtime_log}" | tr '\n' ' ' | grep -E -q "[ERRMGR].*(ERROR|FATAL):.*.*Shutting"); then
    echo "ERROR: ERRMGR RAISED A FATAL ERROR. TEST FAILED." | tee -a ${output_file}
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # Grep for unit test errors (ERROR or FAIL)
  errors=$(cat "${output_file}" "${error_file}" | grep "ERROR" | cat)
  fails=$(cat "${output_file}" "${error_file}" | grep "FAIL" | cat)
  if [ "${errors}" != "" ] || [ "${fails}" != "" ]; then
      echo "ERROR: UNIT TEST RAISED AN ERROR." | tee -a ${output_file}
      exit 1
  fi

  #----------------------------------------------------------------------------------
  # Check files consolidation

  if [ -f "${base_app_dir}"/infile ]; then
    content=$(cat "${base_app_dir}"/infile)
    if [ "${content}" != "IN FILE CONTENT" ]; then
      echo "ERROR: infile FILE CONTENTS ARE NOT AS EXPECTED AFTER EXECUTION." | tee -a ${output_file}
      exit 1
    fi
  fi

  if [ -f "${base_app_dir}"/inoutfile ]; then
    content=$(cat "${base_app_dir}"/inoutfile)
    content="$(echo "$content" | tr -d '\n')"
    if [ "${content}" != "INOUT FILE CONTENT===> INOUT FILE ADDED CONTENT" ]; then
      echo "ERROR: inoutfile FILE CONTENTS ARE NOT AS EXPECTED AFTER EXECUTION." | tee -a ${output_file}
      exit 1
    fi
  fi

  if [ -f "${base_app_dir}"/outfile ]; then
    content=$(cat "${base_app_dir}"/outfile)
    if [ "${content}" != "OUT FILE CONTENT" ]; then
      echo "ERROR: outfile FILE CONTENTS ARE NOT AS EXPECTED AFTER EXECUTION." | tee -a ${output_file}
      exit 1
    fi
  fi

  if [ -f "${base_app_dir}"/inwork ]; then
    content=$(cat "${base_app_dir}"/inwork)
    if [ "${content}" != "Before the task " ]; then
      echo "ERROR: inwork FILE CONTENTS ARE NOT AS EXPECTED AFTER EXECUTION." | tee -a ${output_file}
      exit 1
    fi
  fi

  if [ -f "${base_app_dir}"/outwork ]; then
    content=$(cat "${base_app_dir}"/outwork)
    content="$(echo "$content" | tr -d '\n')"
    if [ "${content}" != "Before the task ===> INOUT FILE ADDED CONTENT" ]; then
      echo "ERROR: outwork FILE CONTENTS ARE NOT AS EXPECTED AFTER EXECUTION." | tee -a ${output_file}
      exit 1
    fi
  fi


  #----------------------------------------------------------------------------------
  # Grep for unit test errors (ERROR or FAIL)
  errors=$(cat "${output_file}" "${error_file}" | grep "ERROR" | cat)
  fails=$(cat "${output_file}" "${error_file}" | grep "FAIL" | cat)
  if [ "${errors}" != "" ] || [ "${fails}" != "" ]; then
    echo "ERROR: UNIT TEST RAISED AN ERROR." | tee -a ${output_file}
    exit 1
  fi

  exit 0
