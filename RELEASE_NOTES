---------------------------̣---
  COMP SUPERSCALAR FRAMEWORK
------------------------------

COMP Superscalar (COMPSs) is a programming model which aims to ease the development of applications for distributed infrastructures,
such as Clusters, Grids and Clouds. COMP superscalar also features a runtime system that exploits the inherent parallelism of 
applications at execution time.

Release number: 2.6 Gardenia
Release date: November-2019
-------------------------------
New features:
         * Runtime:
		- New Commutative direction type for task parameter. It indicates that the order of modifications done by tasks of the same type to the parameter does not affect the final result, i.e., tasks operating on a given commutative parameter can be executed in any order between them.
		- New "Stream" parameter type, to enable the combination of data-flows and task-based workflows in the same application. The stream parameter type is defined to enable communication of streamed data between tasks.
                - Timeout property for tasks. Tasks lasting more than their timeout will be cancelled and considered as failed. This property can be combined with the "onFailure" mechanism.
		- Enable the definition of task groups.
		- Support for throwing special exceptions (COMPSsExceptions) in tasks and catching them in task groups.
		- Task cancellation management in the occurrence of a task group exception and unexpected application finalization (Exception or exit code different from 0)

         * Python:
                - Enable the declaration of a list of strings as a file collection task parameter.
		- Support for Python MPI tasks

         * C:
                - Support for tasks with fine-grain parallelization with OmpSs-2 programming model. 

Improvements:
         - New multi-threaded ready scheduler with better scalability.
         - Support for task with "isReplicated" properties and parameters with INOUT/OUT direction. 
	 - Optimization in deletion of python objects to avoid large synchronizations in shared file systems.
	 - Improved the AutoParallel submodule to define data blocks as collection types.
	 - Several Bug fixes

Known Limitations:
         - Tasks that invoke Numpy and MKL may experience issues if a different MKL threads count is used in different tasks. This is due to the fact that MKL reuses  threads in the different calls and it does not change the number of threads from one call to another.
         - C++ Objects declared as arguments in coarse-grain tasks must be passed as object pointers in order to have proper dependency management.
         - Master as worker is not working for executions with persistent worker in C++.
	 - Coherence and concurrent writing in parameters annotated with the "Concurrent" direction must be managed by the underlying distributed storage system.
	 - Delete file calls for files used as input can produce a significant synchronization of the main code.
	 - Defining a parameter as OUT is only allowed for files and collection files.   

For further information, please refer to “COMPSs User Manual: Application development guide”.

Please find more details about the COMP Superscalar framework at: 
		http://compss.bsc.es/
